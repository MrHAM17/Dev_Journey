import 'package:equatable/equatable.dart';import 'package:flutter/material.dart';import '/core/app_export.dart';import '../models/layout6_item_model.dart';import '../models/layout8_item_model.dart';import '../models/layout9_item_model.dart';import '../models/layout11_item_model.dart';import 'package:the_3_17_housit___buyrentsell_property/presentation/extra_information_screen/models/extra_information_model.dart';part 'extra_information_event.dart';part 'extra_information_state.dart';/// A bloc that manages the state of a ExtraInformation according to the event that is dispatched to it.
class ExtraInformationBloc extends Bloc<ExtraInformationEvent, ExtraInformationState> {ExtraInformationBloc(ExtraInformationState initialState) : super(initialState) { on<ExtraInformationInitialEvent>(_onInitialize); on<UpdateChipViewEvent>(_updateChipView); on<UpdateChipView1Event>(_updateChipView1); on<UpdateChipView2Event>(_updateChipView2); }

_updateChipView(UpdateChipViewEvent event, Emitter<ExtraInformationState> emit, ) { List<Layout6ItemModel> newList = List<Layout6ItemModel>.from(state.extraInformationModelObj!.layout6ItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(extraInformationModelObj: state.extraInformationModelObj?.copyWith(layout6ItemList: newList))); } 
_updateChipView1(UpdateChipView1Event event, Emitter<ExtraInformationState> emit, ) { List<Layout9ItemModel> newList = List<Layout9ItemModel>.from(state.extraInformationModelObj!.layout9ItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(extraInformationModelObj: state.extraInformationModelObj?.copyWith(layout9ItemList: newList))); } 
_updateChipView2(UpdateChipView2Event event, Emitter<ExtraInformationState> emit, ) { List<Layout11ItemModel> newList = List<Layout11ItemModel>.from(state.extraInformationModelObj!.layout11ItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(extraInformationModelObj: state.extraInformationModelObj?.copyWith(layout11ItemList: newList))); } 
List<Layout6ItemModel> fillLayout6ItemList() { return List.generate(2, (index) => Layout6ItemModel()); } 
List<Layout8ItemModel> fillLayout8ItemList() { return [Layout8ItemModel(bedroom: "Bedroom", text: "3"), Layout8ItemModel(bedroom: "Bathroom", text: "2"), Layout8ItemModel(bedroom: "Balcony", text: "2")]; } 
List<Layout9ItemModel> fillLayout9ItemList() { return List.generate(4, (index) => Layout9ItemModel()); } 
List<Layout11ItemModel> fillLayout11ItemList() { return List.generate(7, (index) => Layout11ItemModel()); } 
_onInitialize(ExtraInformationInitialEvent event, Emitter<ExtraInformationState> emit, ) async  { emit(state.copyWith(priceController: TextEditingController(), priceController1: TextEditingController())); emit(state.copyWith(extraInformationModelObj: state.extraInformationModelObj?.copyWith(layout6ItemList: fillLayout6ItemList(), layout8ItemList: fillLayout8ItemList(), layout9ItemList: fillLayout9ItemList(), layout11ItemList: fillLayout11ItemList()))); } 
 }
