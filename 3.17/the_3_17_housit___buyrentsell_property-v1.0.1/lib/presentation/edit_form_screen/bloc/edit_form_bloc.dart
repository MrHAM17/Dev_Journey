import 'package:equatable/equatable.dart';import 'package:flutter/material.dart';import '/core/app_export.dart';import '../models/layout15_item_model.dart';import '../models/layout17_item_model.dart';import '../models/shape_item_model.dart';import '../models/layout19_item_model.dart';import '../models/layout21_item_model.dart';import '../models/layout22_item_model.dart';import '../models/seventy_item_model.dart';import 'package:the_3_17_housit___buyrentsell_property/presentation/edit_form_screen/models/edit_form_model.dart';part 'edit_form_event.dart';part 'edit_form_state.dart';/// A bloc that manages the state of a EditForm according to the event that is dispatched to it.
class EditFormBloc extends Bloc<EditFormEvent, EditFormState> {EditFormBloc(EditFormState initialState) : super(initialState) { on<EditFormInitialEvent>(_onInitialize); on<UpdateChipViewEvent>(_updateChipView); on<UpdateChipView1Event>(_updateChipView1); on<UpdateChipView2Event>(_updateChipView2); on<UpdateChipView3Event>(_updateChipView3); on<UpdateChipView4Event>(_updateChipView4); }

_updateChipView(UpdateChipViewEvent event, Emitter<EditFormState> emit, ) { List<Layout15ItemModel> newList = List<Layout15ItemModel>.from(state.editFormModelObj!.layout15ItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(editFormModelObj: state.editFormModelObj?.copyWith(layout15ItemList: newList))); } 
_updateChipView1(UpdateChipView1Event event, Emitter<EditFormState> emit, ) { List<Layout17ItemModel> newList = List<Layout17ItemModel>.from(state.editFormModelObj!.layout17ItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(editFormModelObj: state.editFormModelObj?.copyWith(layout17ItemList: newList))); } 
_updateChipView2(UpdateChipView2Event event, Emitter<EditFormState> emit, ) { List<Layout19ItemModel> newList = List<Layout19ItemModel>.from(state.editFormModelObj!.layout19ItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(editFormModelObj: state.editFormModelObj?.copyWith(layout19ItemList: newList))); } 
_updateChipView3(UpdateChipView3Event event, Emitter<EditFormState> emit, ) { List<Layout22ItemModel> newList = List<Layout22ItemModel>.from(state.editFormModelObj!.layout22ItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(editFormModelObj: state.editFormModelObj?.copyWith(layout22ItemList: newList))); } 
_updateChipView4(UpdateChipView4Event event, Emitter<EditFormState> emit, ) { List<SeventyItemModel> newList = List<SeventyItemModel>.from(state.editFormModelObj!.seventyItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(editFormModelObj: state.editFormModelObj?.copyWith(seventyItemList: newList))); } 
List<Layout15ItemModel> fillLayout15ItemList() { return List.generate(2, (index) => Layout15ItemModel()); } 
List<Layout17ItemModel> fillLayout17ItemList() { return List.generate(5, (index) => Layout17ItemModel()); } 
List<ShapeItemModel> fillShapeItemList() { return [ShapeItemModel(shape: ImageConstant.imgShape52), ShapeItemModel(shape: ImageConstant.imgShape53), ShapeItemModel(shape: ImageConstant.imgShape21), ShapeItemModel(shape: ImageConstant.imgShape21)]; } 
List<Layout19ItemModel> fillLayout19ItemList() { return List.generate(2, (index) => Layout19ItemModel()); } 
List<Layout21ItemModel> fillLayout21ItemList() { return [Layout21ItemModel(bedroom: "Bedroom", text: "2"), Layout21ItemModel(bedroom: "Bathroom", text: "2"), Layout21ItemModel(bedroom: "Balcony", text: "1")]; } 
List<Layout22ItemModel> fillLayout22ItemList() { return List.generate(4, (index) => Layout22ItemModel()); } 
List<SeventyItemModel> fillSeventyItemList() { return List.generate(7, (index) => SeventyItemModel()); } 
_onInitialize(EditFormInitialEvent event, Emitter<EditFormState> emit, ) async  { emit(state.copyWith(formPasswordController: TextEditingController())); emit(state.copyWith(editFormModelObj: state.editFormModelObj?.copyWith(layout15ItemList: fillLayout15ItemList(), layout17ItemList: fillLayout17ItemList(), shapeItemList: fillShapeItemList(), layout19ItemList: fillLayout19ItemList(), layout21ItemList: fillLayout21ItemList(), layout22ItemList: fillLayout22ItemList(), seventyItemList: fillSeventyItemList()))); } 
 }
