import 'package:equatable/equatable.dart';import 'package:flutter/material.dart';import '/core/app_export.dart';import '../models/frameeightyone_item_model.dart';import '../models/toplocationslocationdetail_item_model.dart';import 'package:the_3_17_housit___buyrentsell_property/presentation/top_locations_location_detail_screen/models/top_locations_location_detail_model.dart';part 'top_locations_location_detail_event.dart';part 'top_locations_location_detail_state.dart';/// A bloc that manages the state of a TopLocationsLocationDetail according to the event that is dispatched to it.
class TopLocationsLocationDetailBloc extends Bloc<TopLocationsLocationDetailEvent, TopLocationsLocationDetailState> {TopLocationsLocationDetailBloc(TopLocationsLocationDetailState initialState) : super(initialState) { on<TopLocationsLocationDetailInitialEvent>(_onInitialize); on<UpdateChipViewEvent>(_updateChipView); }

_updateChipView(UpdateChipViewEvent event, Emitter<TopLocationsLocationDetailState> emit, ) { List<FrameeightyoneItemModel> newList = List<FrameeightyoneItemModel>.from(state.topLocationsLocationDetailModelObj!.frameeightyoneItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(topLocationsLocationDetailModelObj: state.topLocationsLocationDetailModelObj?.copyWith(frameeightyoneItemList: newList))); } 
List<FrameeightyoneItemModel> fillFrameeightyoneItemList() { return List.generate(2, (index) => FrameeightyoneItemModel()); } 
List<ToplocationslocationdetailItemModel> fillToplocationslocationdetailItemList() { return [ToplocationslocationdetailItemModel(flowerHeavenHouse: "Flower Heaven House", text: "4.7 ", baliIndonesia: "Bali, Indonesia", price: " 370", month: "/month"), ToplocationslocationdetailItemModel(flowerHeavenHouse: "Flower Heaven House", text: "4.7 ", baliIndonesia: "Bali, Indonesia", price: " 370", month: "/month")]; } 
_onInitialize(TopLocationsLocationDetailInitialEvent event, Emitter<TopLocationsLocationDetailState> emit, ) async  { emit(state.copyWith(searchController: TextEditingController())); emit(state.copyWith(topLocationsLocationDetailModelObj: state.topLocationsLocationDetailModelObj?.copyWith(frameeightyoneItemList: fillFrameeightyoneItemList(), toplocationslocationdetailItemList: fillToplocationslocationdetailItemList()))); } 
 }
